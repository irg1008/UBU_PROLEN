/**
 * Práctica 03 - Procesadores del Lenguaje.
 * 
 * @author Iván Ruiz Gázquez.
 * @date 24/11/2020.
 */

PARSER_BEGIN(PTres)

public class PTres {
  public static void main(String args[]) {
    try {
      PTres parser = new PTres(args.length < 1 ? System.in : new java.io.FileInputStream(args[0]));
      parser.Program();
    } catch (java.io.FileNotFoundException e) {
      System.err.println("File not found: (" + args[0] + ")");
    } catch (Exception e) {
      e.printStackTrace();
      System.err.println("Something went wrong!");
    }
  }

  static int global_label = 0;

  public static int getLabel() {
    return global_label++;
  }

  public static void print(CharSequence s) {
    System.out.println(s);
  }
  
  public static void printT(CharSequence s) {
    print("\t" + s);
  }

  // Funciones salida del programa.
  public static void valori(Token s)          { printT("valori " + s); }
  public static void valord(Token s)          { printT("valord " + s); }
  public static void mete(Token s)            { printT("mete " + s); }
  public static void siFalsoVea(int label)    { printT("sifalsovea LBL" + label); }
  public static void siCiertoVea(int label)   { printT("siciertovea LBL" + label); }
  public static void vea(int label)           { printT("vea LBL" + label); }
  public static void lbl(int label)           { print("LBL" + label); }
  public static void div()                    { printT("div"); }
  public static void mul()                    { printT("mul"); }
  public static void sub()                    { printT("sub"); }
  public static void sum()                    { printT("sum"); }
  public static void asigna()                 { printT("asigna"); }
  public static void display()                { printT("print"); }
}

PARSER_END(PTres)

TOKEN:
{
    < #DIG: ["0"-"9"] > 
  | < #CHAR: ["a"-"z", "A"-"Z"] >
  | < COMPUTE: "COMPUTE" >
  | < IF: "IF" >
  | < ELSE: "ELSE" >
  | < END_IF: "END-IF" > 
  | < EVALUATE: "EVALUATE" >
  | < END_EVALUATE: "END-EVALUATE" >
  | < PERFORM: "PERFORM" >
  | < END_PERFORM: "END-PERFORM" >
  | < UNTIL: "UNTIL" >
  | < DISPLAY: "DISPLAY" >
  | < WHEN: "WHEN" >
  | < MOVE: "MOVE" >
  | < TO: "TO" >
  | < NUM: (<DIG>)+ >
  | < ID: <CHAR> (<CHAR> | <NUM>)* >
}

SKIP: 
{
    < SPACES: [" ", "\t", "\n", "\r"] >
  | < COMMENT: "**" (~["\r", "\n"])* > // Skip de los comentarios de una línea.
}

/**
 * Main = Sentences().
 */
void Program(): { }
{
  Sentences()
  <EOF>
}

/**
 * Sentencia:
 *   Sen()+
 */
void Sentences(): { }
{
  ( Sen() )+
}

/**
 * Sentencia:
 *    Asig()
 *  | Proc()
 */
void Sen(): { }
{
  ( Assig() | Proc() )
}

/**
 * Asignación:
 *    COMPUTE <ID> = ArithExp()
 *  | MOVE (<ID> | <NUM>) TO <ID>
 */
void Assig():
{
  Token v,
  m = null,
  n = null;
}
{
  (  
      // COMPUTE
      <COMPUTE> v=<ID> { valori(v); } "=" ArithExp()
    | // MOVE
      <MOVE> (m=<NUM> | n=<ID>) <TO> v=<ID>
      {
        valori(v);
        if (m == null) valord(n);
        else mete(m);
      }
  ) { asigna();}
}

/**
 * Procedimiento:
 *    If()
 *  | Evaluate()
 *  | Perform()
 *  | Display()
 */
void Proc(): { }
{
  ( If() | Evaluate() | Perform() | Display() )
}

/**
 * If ArithExp()
 *  Sentences()
 * ELSE
 *  Sentences()
 * END-IF
 */
void If():
{
  int elseLabel = getLabel(),
  ifLabel = getLabel();
}
{
  ( 
    // IF
    <IF> ArithExp() { siFalsoVea(elseLabel); }
    Sentences()
    {
      vea(ifLabel);
      lbl(elseLabel);
    }
    // Else()
    Else() { lbl(ifLabel); }
    // END-IF
    <END_IF>
  )
}

/**
 * EVALUATE id
 *  When()+
 * END-EVALUATE
 */
void Evaluate():
{ 
  Token v;
  int evaluateLabel = getLabel(),
  whenLabel = getLabel();
}
{
  ( 
    // EVALUATE
    <EVALUATE> v=<ID>
    ( WhenClause(v, evaluateLabel, whenLabel) 
      {
        lbl(whenLabel);
        whenLabel = getLabel();
      }
    )+
    // END-EVALUATE
    <END_EVALUATE> { lbl(evaluateLabel); }
  )
}

/**
 * PERFORM UNTIL ArithExp()
 *  Sentences()
 * END-PERFORM
 */
void Perform():
{
  int performLabel = getLabel(),
  endPerformLabel = getLabel();
}
{
  ( 
    // PERFORM UNTIL
    <PERFORM> <UNTIL> { lbl(performLabel); }
    ArithExp() { siCiertoVea(endPerformLabel); } 
    Sentences()
    // END-PERFORM
    <END_PERFORM> 
    {
      vea(performLabel);
      lbl(endPerformLabel);
    }
  ) 
}

/**
 * DISPLAY ArithExp()
 */
void Display(): { }
{ 
  // DISPLAY
  ( <DISPLAY> ArithExp() ) { display(); }
}

/**
 * ELSE
 *  Sentences()
 */
void Else(): { }
{
  ( <ELSE> Sentences() )?
}

/**
 * WHEN ArithExp()
 *  Sentences()
 */
void WhenClause
(
  Token v,
  int evaluateLabel,
  int whenLabel
): { }
{
  ( 
    // WHEN
    <WHEN> { valord(v); }
    ArithExp() 
    {
      sub();
      siFalsoVea(whenLabel);
    }
    Sentences() { vea(evaluateLabel); }
  )
}

/**
 * MultExp() ("+" | "-") MultExp()
 */
void ArithExp(): { }
{
  MultExp()
  (
      "+" MultExp() { sum(); }
    | "-" MultExp() { sub(); }
  )*
}

/**
 * Value() ("*" | "/") Value()
 */
void MultExp(): { }
{
  Value()
  (
      "*" Value() { mul(); }
    | "/" Value() { div(); }
  )*
}

/**
 * Value:
 *   <NUM>
 * | <ID>
 * | "(" ArithExp() ")"
 */
void Value(): { Token v; }
{
  (
      v=<NUM> { mete(v); }
    | v=<ID> { valord(v); }
    | "(" ArithExp() ")"
  )
}